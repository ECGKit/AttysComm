AttysCOMM
---------

This is the C++ (Python) and JAVA API for the Attys: http://www.attys.tech


The C++ class with its Python wrapper is in the "cpp" directory and the JAVA class
in the usual Android subdirectories.


C++
----
Installation/compilation is with cmake under Linux / Mac:
- cmake .
- make
- sudo make install

This will generate: a dynamic library libattyscomm.so, a static
one called libattyscomm_static.a and a python module called
pyattyscomm which contains exactly the class members of AttysComm
and AttysScan.

Installation under Windows:
- cmake -G "Visual Studio 15 2017 Win64" .
and then start Visual C++ and compile it. Just use the static
library.


1) scan for Attys
int ret = attysScan.scan();

2) Check the number of Attys detected
attysScan.nAttysDevices

3) If devices have been detected they show up as an array
attysScan.attysComm[0,1,2,etc] points to the AttysComm instances

4) Set the parameters, for example:
attysScan.attysComm[0]->setAdc_samplingrate_index(AttysComm::ADC_RATE_250HZ);

5) Register a callback (optional)
attysCallback = new AttysCallback(this);
attysScan.attysComm[0]->registerCallback(attysCallback);

6) Start data acquisition
attysScan.attysComm[0]->start();

7) Check if ringbuffer contains data and wait till true
attysScan.attysComm[n]->hasSampleAvilabale();

8) Get samples from buffer
float* values = attysScan.attysComm[n]->getSampleFromBuf
fer();

9) go back to 7)

10) Ending the program:
attysScan.attysComm[n]->quit();
attysScan.attysComm[n]->wait();


JAVA:
-----

In general the java class AttysComm is well documented.
Check out the class itself.
You find all the constants and function calls there.


Usage
------


1) Create AttysComm:

BluetoothDevice bd = AttysComm.findAttysBtDevice();
attysComm = new AttysComm(bd);


2) Set options:

In general there are constants defined for the differnet options,
for example: AttysComm.ADC_RATE_250HZ for the sampling rate:

attysComm.setAdc_samplingrate_index(AttysComm.ADC_RATE_250HZ);


3) (Optional) Register a message listener for error messages:

attysComm.registerMessageListener(messageListener);



4) Start the data acquisition

attysComm.start();



5) Read the data from the ringbuffer in a TimerTask:

    class UpdatePlotTask extends TimerTask {

        public synchronized void run() {

            if (attysComm != null) {
                if (attysComm.hasFatalError()) {
                    handler.sendEmptyMessage(AttysComm.MESSAGE_ERROR);
                    return;
                }
            }
            if (attysComm != null) {
                if (!attysComm.hasActiveConnection()) return;
            }

            if (attysComm != null) {

  	        n = attysComm.getNumSamplesAvilable();
		for(int i = 0;i<n;i++) {
                    sample = attysComm.getSampleFromBuffer();
		    PROCESS / PLOT / ETC SAMPLE
		}
	    }
        }
    }

6) (Optional) there is also an event listener whenever a sample has arrived:

    public interface DataListener {
        void gotData(long samplenumber, float[] data);
    }

7) to stop AttysComm just call "stop()". It's blocking and will only return after
   the Thread talking to the Attys has been terminated.



Generally check out the public section of the class AttysComm for more info.

Enjoy!

http://www.attys.tech
